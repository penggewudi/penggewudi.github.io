<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>人生苦短</title>
  
  <subtitle>喜而不狂，忧而不伤~</subtitle>
  <link href="https://penggewudi.github.io/atom.xml" rel="self"/>
  
  <link href="https://penggewudi.github.io/"/>
  <updated>2021-01-21T07:37:51.065Z</updated>
  <id>https://penggewudi.github.io/</id>
  
  <author>
    <name>Shiny Peng</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>随笔(三)</title>
    <link href="https://penggewudi.github.io/2021/01/21/%E9%9A%8F%E7%AC%94(%E4%B8%89)/"/>
    <id>https://penggewudi.github.io/2021/01/21/%E9%9A%8F%E7%AC%94(%E4%B8%89)/</id>
    <published>2021-01-21T06:53:10.000Z</published>
    <updated>2021-01-21T07:37:51.065Z</updated>
    
    <content type="html"><![CDATA[<p>​        不知不觉2020年已经溜走了，想不到写到现在都已经是2021年的随笔了，每周一更的任务还是没完成、轨迹重识别的课题依旧还是困难重重、一直想要学习的数据结构还是没有着手开始、数据挖掘竞赛也是屡屡推迟， 这么一看我的2020年似乎还是有很多的事情没有完成呐~</p><p>​        对于我自己的性格，我自认为还是很了解我自己的，会有很多很多的想法，有很多的计划和目标，但是真正动手去努力完成的却少之又少，不得不说坚持真的是一件很困难的事情，是违背人的一种天生懒惰 的一件事情，可是在这世上，如果我做事情不能坚持的话，我相信我也很难成功，很难出色的去完成一项任务吧。</p><p>​        今天是21年1月21日，其实我今天的心情有点难以用言语形容的烦躁，这还得从昨天晚上看论文说起来，昨天晚上我心血来潮去找了找关于轨迹用户是别人的被引文献，没想到找呀找真的找到了一篇别人也是用孪生网络去做这个课题的论文，我赶忙下载下来进行学习参考，通篇看完之后，我觉得论文写得很好，好到把我想做的还没想做的都已经写上去了，那分钟其实我是有点蒙圈的，那种感觉就好像你以为你是哥伦布发现了新大陆一样，其实你仔细一看，不仅仅不是你发现的新大陆，而大陆都已经被发开过一遍了，:cry:想想都觉得很心酸，我觉得自己这个方向还可以继续努力继续往下挖掘的时候，别人已经抢先在你的前面把你所想做的事情都做完了，毫不夸张的说当时我都觉得自己的人生都快失去意义了，没错仅仅是因为我想做的课题的idea被别人想到了，啊这，好吧其实我也觉得我的反应有点过度了，可还是安奈不住内心烦躁的情绪，刚好看了看表，又到了每天我最期待的给女朋友打电话的环节，哈哈哈，虽然说这种事情和别人也多说无益，也帮不了我解决任何的问题，但是我还是一股脑的向她诉苦，说我毕不了业了啦o(╥﹏╥)o课题做不出来啦，结果女朋友就一顿咔咔咔的安慰，毕不了业就毕不了业呗，咱们大不了就一起毕业，说实话我觉得还是蛮感动的，心里也其实没有难难受了，就这样一直聊着聊着到了12点钟才挂电话。</p><p>​        可能这就是急性子的一点不好地方吧，我总觉得遇到点事情就好像天要塌下来一样的感觉，虽然这件事情可能真的真能听从命运的安排，或者这个时候你也可以问问你自己，你真的尽力了吗？你真的把你的时间都尽量的花到学习上面了吗？或者我没有尽力，或许只是我自己想给自己一个不想努力的借口，或者我真的是做不好这件事情，或者。。。</p><p>​        回想起我过去经历大大小小的很多事情，虽说我也还没有到而立之年，但是我觉得我也算是遇到了解决了很多的事情，也是见到了点大风大浪的人了，有什么事情是过不去的坎呢，不都过去了吗？我不还是好好的吗？也没见到天塌了太阳不升起来了，太把自己当回事了，人生的路该向前走就向前走，走不动了，咱们就停下脚步，看看周围的风景和过客，收拾好自己然后我们再继续前行。可道理我都懂，但是却依然遇到事情还是会慌张、会手足无措，所以21年请对我好一点吧，我也会努力让自己的步伐变得从容起来。</p><iframe frameborder="no" border="0" marginwidth="0" marginheight="0" width="330" height="86" src="//music.163.com/outchain/player?type=2&id=25706282&auto=0&height=66"></iframe><p>​        </p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;​        不知不觉2020年已经溜走了，想不到写到现在都已经是2021年的随笔了，每周一更的任务还是没完成、轨迹重识别的课题依旧还是困难重重、一直想要学习的数据结构还是没有着手开始、数据挖掘竞赛也是屡屡推迟， 这么一看我的2020年似乎还是有很多的事情没有完成呐~&lt;</summary>
      
    
    
    
    
    <category term="随笔" scheme="https://penggewudi.github.io/tags/%E9%9A%8F%E7%AC%94/"/>
    
  </entry>
  
  <entry>
    <title>随笔(二)</title>
    <link href="https://penggewudi.github.io/2020/12/06/%E9%9A%8F%E7%AC%94(%E4%BA%8C)/"/>
    <id>https://penggewudi.github.io/2020/12/06/%E9%9A%8F%E7%AC%94(%E4%BA%8C)/</id>
    <published>2020-12-06T11:04:56.000Z</published>
    <updated>2020-12-06T14:25:57.570Z</updated>
    
    <content type="html"><![CDATA[<p>时间过得真快，转眼间已经悄然十二月份了，天气也渐渐转冷了，上师大校园里给人的感觉依然很安静~ 和淮工不大相同，仿佛一切都是那么轻快，不紧不慢，可能也是到了我现在这个阶段，不需要上课的缘故吧~</p><p>这学期的研究课题也更换了一些，从之前大师兄手上的人流量预测，再到空气质量预测，最后到现在的行人重识别ReID，终于课题是已经确定下来了，而且这学期也已经开过题目了，现如今要做的事情也就是将手头上的课题进行研究透彻，多看别人的paper，积累思路和方法论，实现更好的匹配效果以及鲁棒性。</p><p>虽然课题到目前为止依然还没有太大的进展，但是也权当是给自己一个总结吧，告诫自己还是要踏踏实实，勤奋务实一点，做好自己的课题和任务。</p><ul><li><p>我一开始刚刚了解这个课题的时候，那时候还还处于疫情期间，我还呆在家里没有返校，老师让L师兄给我讲解一下他现在正在做的课题，让我再后面的时间里继续沿着他的方向继续做下去，因为考虑到现阶段做交通流量预测的人比较多，而创新性的模型和算法又比较有限，所以基于此，老师说让我开始协助师兄做ReID的课题任务，第一次和老师开过一次会议，讨论了一下这个课题的目的以及意义，老师想让我们采用GCN的方法来实现轨迹的特征提取以及匹配，我之前研究流量预测课题的时候也对熟悉过GCN的方法，所以就开始上手尝试，但是发现在当前的数据下node的节点数目很多，有三万多个，所以首先需要对站点进行聚类，缩减站点的数目，后面再进行模型的研究和学习，所以在这段时间里面我就开始着手进行聚类的分析</p></li><li><p>接下里的学习中，由于GCN的实验效果并不如意，没有起到很好的实验效果，所以继续转用RNN的方法进行实现，构建孪生网络的方法来对轨迹数据进行处理分析，一开始的话我没有找到什么合适的代码和论文，只能自己一个人瞎捉摸，后来老师发了一些论文来进行学习和参考，师兄也把他之前看过的论文发给我进行学习，老师当时给我的数据集是和师兄一样的手机基站数据集，但是后来老师让我使用之前做流量预测的地铁刷卡数据集SCD进行测试，在经过一系列的数据处理和分析之后，验证实验效果，发现效果很好，准确率也能够到达90%以上。</p></li><li><p>在上述的工作中，出现了很多疏漏的问题，包括论文看的不够仔细，很多细节的问题没有掌握清楚，因为有开源代码，所以上来就直接看代码，没有领会到论文的一些思想，尤其是在Dplink框架中，关于数据集的构建问题，由于没有仔细的查看论文已经代码，都是拿来主义，上来就直接跑代码，导致了很多很多问题也不理解，和老师的沟通也不明确，在这方面需要改进，不能心急，得一步步的咬文嚼字，认真的学习代码和思路，切不可大意。</p></li><li><p>现阶段的工作在于测试其他数据集上的实验效果，为了验证模型的推广性，所以找到了一些开源数据集在上面进行测试分析，如何划分时间段、如何构建深度学习框架训练集正负样本、如何构建Baseline的训练集，这都是待解决的问题，还有模型还有需要改进的空间，话说回来这段时间一直都是在解决数据集的问题，在反复的处理数据集，修改数据集，构建数据集，反而在模型的改进上没有进行什么实质性的工作，耽误了不少的进度，上次老师发的paper也还没看，得给自己提个醒了</p></li><li><p>ps：上次和老师打电话沟通问题，刚吃完火锅，脑子一片空白，老师说的啥我一点都没听明白，真的是好惭愧啊，结果那几天晚上都没睡好，整个人都不好了，啊还有竞赛的学习资料和项目<br>还处于停滞状态，所以时不我待啦，就先这样吧~后面有空再继续补上！！！</p><iframe frameborder="no" border="0" marginwidth="0" marginheight="0" width="330" height="86" src="//music.163.com/outchain/player?type=2&id=25638273&auto=0&height=66"></iframe></li></ul>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;时间过得真快，转眼间已经悄然十二月份了，天气也渐渐转冷了，上师大校园里给人的感觉依然很安静~ 和淮工不大相同，仿佛一切都是那么轻快，不紧不慢，可能也是到了我现在这个阶段，不需要上课的缘故吧~&lt;/p&gt;
&lt;p&gt;这学期的研究课题也更换了一些，从之前大师兄手上的人流量预测，再到空气</summary>
      
    
    
    
    
    <category term="随笔" scheme="https://penggewudi.github.io/tags/%E9%9A%8F%E7%AC%94/"/>
    
  </entry>
  
  <entry>
    <title>Plotly学习记录(二)</title>
    <link href="https://penggewudi.github.io/2020/11/24/Plotly%E5%AD%A6%E4%B9%A0%E8%AE%B0%E5%BD%95(%E4%BA%8C)/"/>
    <id>https://penggewudi.github.io/2020/11/24/Plotly%E5%AD%A6%E4%B9%A0%E8%AE%B0%E5%BD%95(%E4%BA%8C)/</id>
    <published>2020-11-24T12:44:41.000Z</published>
    <updated>2020-11-24T12:46:20.983Z</updated>
    
    <content type="html"><![CDATA[<h3 id="可视化开发库Plotly使用教程（二）"><a href="#可视化开发库Plotly使用教程（二）" class="headerlink" title="可视化开发库Plotly使用教程（二）"></a>可视化开发库Plotly使用教程（二）</h3><h4 id="Style-Scatter-Plots"><a href="#Style-Scatter-Plots" class="headerlink" title="Style Scatter Plots"></a>Style Scatter Plots</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> plotly.graph_objects <span class="keyword">as</span> go</span><br><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">t = np.linspace(<span class="number">0</span>, <span class="number">10</span>, <span class="number">100</span>)</span><br><span class="line"></span><br><span class="line">fig = go.Figure()</span><br><span class="line"></span><br><span class="line">fig.add_trace(go.Scatter(</span><br><span class="line">    x=t, y=np.sin(t),</span><br><span class="line">    name=<span class="string">&#x27;sin&#x27;</span>,</span><br><span class="line">    mode=<span class="string">&#x27;markers&#x27;</span>,</span><br><span class="line">    marker_color=<span class="string">&#x27;rgba(152, 0, 0, .8)&#x27;</span></span><br><span class="line">))</span><br><span class="line"></span><br><span class="line">fig.add_trace(go.Scatter(</span><br><span class="line">    x=t, y=np.cos(t),</span><br><span class="line">    name=<span class="string">&#x27;cos&#x27;</span>,</span><br><span class="line">    marker_color=<span class="string">&#x27;rgba(255, 182, 193, .9)&#x27;</span></span><br><span class="line">))</span><br><span class="line"></span><br><span class="line"><span class="comment"># Set options common to all traces with fig.update_traces</span></span><br><span class="line">fig.update_traces(mode=<span class="string">&#x27;markers&#x27;</span>, marker_line_width=<span class="number">2</span>, marker_size=<span class="number">10</span>)</span><br><span class="line">fig.update_layout(title=<span class="string">&#x27;Styled Scatter&#x27;</span>,</span><br><span class="line">                  yaxis_zeroline=<span class="literal">False</span>, xaxis_zeroline=<span class="literal">False</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">fig.show()</span><br></pre></td></tr></table></figure><p><img src= "/img/loading.gif" data-lazy-src="https://i.loli.net/2020/11/23/b8gF3hurLxBfMP9.png" alt="image.png"></p><h4 id="Data-Labels-on-Hover"><a href="#Data-Labels-on-Hover" class="headerlink" title="Data Labels on Hover"></a>Data Labels on Hover</h4><p>将数据标签悬停，x轴表示州的缩写，y轴表示人口数量，marker的颜色也根据人口数量的不同而改变</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> plotly.graph_objects <span class="keyword">as</span> go</span><br><span class="line"><span class="keyword">import</span> pandas <span class="keyword">as</span> pd</span><br><span class="line"></span><br><span class="line">data= pd.read_csv(<span class="string">&quot;https://raw.githubusercontent.com/plotly/datasets/master/2014_usa_states.csv&quot;</span>)</span><br><span class="line"></span><br><span class="line">fig = go.Figure(data=go.Scatter(x=data[<span class="string">&#x27;Postal&#x27;</span>],</span><br><span class="line">                                y=data[<span class="string">&#x27;Population&#x27;</span>],</span><br><span class="line">                                mode=<span class="string">&#x27;markers&#x27;</span>,</span><br><span class="line">                                marker_color=data[<span class="string">&#x27;Population&#x27;</span>],</span><br><span class="line">                                text=data[<span class="string">&#x27;State&#x27;</span>])) <span class="comment"># hover text goes here</span></span><br><span class="line"></span><br><span class="line">fig.update_layout(title=<span class="string">&#x27;Population of USA States&#x27;</span>)</span><br><span class="line">fig.show()</span><br></pre></td></tr></table></figure><p><img src= "/img/loading.gif" data-lazy-src="https://i.loli.net/2020/11/23/QXjY1JVyf7KaCUz.png" alt="image.png"></p><h4 id="Scatter-with-a-Color-Dimension"><a href="#Scatter-with-a-Color-Dimension" class="headerlink" title="Scatter with a Color Dimension"></a>Scatter with a Color Dimension</h4><p>marker颜色的深浅也可以表示维度，通过设置<code>showscale</code>来显示颜色条，<code>colorscale</code>设置颜色条的格式<a href="https://plotly.com/python/builtin-colorscales/">More Info</a></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> plotly.graph_objects <span class="keyword">as</span> go</span><br><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"></span><br><span class="line">fig = go.Figure(data=go.Scatter(</span><br><span class="line">    y = np.random.randn(<span class="number">500</span>),</span><br><span class="line">    mode=<span class="string">&#x27;markers&#x27;</span>,</span><br><span class="line">    marker=<span class="built_in">dict</span>(</span><br><span class="line">        size=<span class="number">16</span>,</span><br><span class="line">        color=np.random.randn(<span class="number">500</span>), <span class="comment">#set color equal to a variable</span></span><br><span class="line">        colorscale=<span class="string">&#x27;Viridis&#x27;</span>, <span class="comment"># one of plotly colorscales</span></span><br><span class="line">        showscale=<span class="literal">True</span></span><br><span class="line">    )</span><br><span class="line">))</span><br><span class="line"></span><br><span class="line">fig.show()</span><br></pre></td></tr></table></figure><p><img src= "/img/loading.gif" data-lazy-src="https://i.loli.net/2020/11/23/9iPgDzj1uBFUhHM.png" alt="image.png"></p><h4 id="Large-Data-Sets"><a href="#Large-Data-Sets" class="headerlink" title="Large Data Sets"></a>Large Data Sets</h4><p>在plotly中，可以用<code>Scattergl()</code>来实现<code>WebGL</code>用来替代<code>Scatter()</code>实现更快的速度、改进交互性和绘制更多数据的能力</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> plotly.graph_objects <span class="keyword">as</span> go</span><br><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"></span><br><span class="line">N = <span class="number">100000</span></span><br><span class="line">fig = go.Figure(data=go.Scattergl(</span><br><span class="line">    x = np.random.randn(N),</span><br><span class="line">    y = np.random.randn(N),</span><br><span class="line">    mode=<span class="string">&#x27;markers&#x27;</span>,</span><br><span class="line">    marker=<span class="built_in">dict</span>(</span><br><span class="line">        color=np.random.randn(N),</span><br><span class="line">        colorscale=<span class="string">&#x27;Viridis&#x27;</span>,</span><br><span class="line">        line_width=<span class="number">1</span></span><br><span class="line">    )</span><br><span class="line">))</span><br><span class="line"></span><br><span class="line">fig.show()</span><br></pre></td></tr></table></figure><p><img src= "/img/loading.gif" data-lazy-src="https://i.loli.net/2020/11/23/bSt5i9YJgFZTCyA.png" alt="image.png"></p><blockquote><p>以上就是Base Chart中 Scatter Plots的一些简单的使用，在后续的学习中会继续更新其他图标的使用</p></blockquote><p><img src= "/img/loading.gif" data-lazy-src="https://i.loli.net/2020/11/24/b52sh1rVAuxm9LE.png" alt="image.png"></p>]]></content>
    
    
      
      
    <summary type="html">&lt;h3 id=&quot;可视化开发库Plotly使用教程（二）&quot;&gt;&lt;a href=&quot;#可视化开发库Plotly使用教程（二）&quot; class=&quot;headerlink&quot; title=&quot;可视化开发库Plotly使用教程（二）&quot;&gt;&lt;/a&gt;可视化开发库Plotly使用教程（二）&lt;/h3&gt;&lt;h4 i</summary>
      
    
    
    
    
    <category term="学习" scheme="https://penggewudi.github.io/tags/%E5%AD%A6%E4%B9%A0/"/>
    
    <category term="plotly" scheme="https://penggewudi.github.io/tags/plotly/"/>
    
  </entry>
  
  <entry>
    <title>Plotly学习记录</title>
    <link href="https://penggewudi.github.io/2020/11/16/Plotly%E5%AD%A6%E4%B9%A0%E8%AE%B0%E5%BD%95(%E4%B8%80)/"/>
    <id>https://penggewudi.github.io/2020/11/16/Plotly%E5%AD%A6%E4%B9%A0%E8%AE%B0%E5%BD%95(%E4%B8%80)/</id>
    <published>2020-11-16T14:32:15.000Z</published>
    <updated>2020-11-16T14:54:44.906Z</updated>
    
    <content type="html"><![CDATA[<h3 id="可视化开发库Plotly使用教程（一）"><a href="#可视化开发库Plotly使用教程（一）" class="headerlink" title="可视化开发库Plotly使用教程（一）"></a>可视化开发库Plotly使用教程（一）</h3><p><img src= "/img/loading.gif" data-lazy-src="https://i.loli.net/2020/11/16/H4NB6xIoRMncula.png"></p><p>在Datawhale公众号上看到了一篇关于深圳租房信息的数据分析文章，文中作者采用的就是这个可视化库，看起来视觉效果也很棒，所以借着这个机会学习一下， 以便后面建模数据分析可视化能用的上, 有三种语言API可供选择，不多说，直接上<strong>Python</strong>~</p><h4 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h4><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ pip install plotly</span><br><span class="line">$ conda install -c plotly</span><br></pre></td></tr></table></figure><p>可以参考官网安装教程<a href="https://plotly.com/python/getting-started/">Click Here</a></p><h4 id="Basic-Charts"><a href="#Basic-Charts" class="headerlink" title="Basic Charts"></a>Basic Charts</h4><p>先从一些常用的基本图来看吧（散点图、条形图、饼状图等）</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># x and y given as array_like objects</span></span><br><span class="line"><span class="keyword">import</span> plotly.express <span class="keyword">as</span> px</span><br><span class="line">fig = px.scatter(x=[<span class="number">0</span>, <span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>], y=[<span class="number">0</span>, <span class="number">1</span>, <span class="number">4</span>, <span class="number">9</span>, <span class="number">16</span>])</span><br><span class="line">fig.show()</span><br></pre></td></tr></table></figure><p><img src= "/img/loading.gif" data-lazy-src="https://i.loli.net/2020/11/16/4Mm1NkV9Av67Jqz.png"></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># x and y given as DataFrame columns</span></span><br><span class="line"><span class="keyword">import</span> plotly.express <span class="keyword">as</span> px</span><br><span class="line">df = px.data.iris() <span class="comment"># iris is a pandas DataFrame</span></span><br><span class="line">fig = px.scatter(df, x=<span class="string">&quot;sepal_width&quot;</span>, y=<span class="string">&quot;sepal_length&quot;</span>)</span><br><span class="line">fig.show()</span><br></pre></td></tr></table></figure><p>这里是读取pandas iris数据集，也是常用的学习数据集了,plotly对于dataframe可视化比较友好，操作逻辑也和seaborn类似，有很多共通的地方。</p><p><img src= "/img/loading.gif" data-lazy-src="https://i.loli.net/2020/11/16/Z7vDCaKuSit18ny.png"></p><p><img src= "/img/loading.gif" data-lazy-src="https://i.loli.net/2020/11/16/vrNUL8IfnC9TBqg.png"></p><p>iris数据集的中文名是安德森鸢尾花卉数据集,数据集head如上图所示，plotly的散点图，可以完整的展示多个特征的相互关系，代码和效果图如下所示：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">df = px.data.iris()</span><br><span class="line">fig = px.scatter(df, x=<span class="string">&quot;sepal_width&quot;</span>, y=<span class="string">&quot;sepal_length&quot;</span>, color=<span class="string">&quot;species&quot;</span>,</span><br><span class="line">                 size=<span class="string">&#x27;petal_length&#x27;</span>, hover_data=[<span class="string">&#x27;petal_width&#x27;</span>])</span><br><span class="line">fig.show()</span><br></pre></td></tr></table></figure><p><img src= "/img/loading.gif" data-lazy-src="https://i.loli.net/2020/11/16/NLd5WT8aA6vOrUu.png"></p><p>xy轴分别表示不同的特征(花萼宽度、花萼长度)，marker的size(大小)表示petal length(花瓣长度)，marker color 表示不同花的种类。</p><p>使用mode参数可以选择 marker、lines 或者 将它们结合，代码和效果图如下所示：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> plotly.graph_objects <span class="keyword">as</span> go</span><br><span class="line"></span><br><span class="line"><span class="comment"># Create random data with numpy</span></span><br><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line">np.random.seed(<span class="number">1</span>)</span><br><span class="line"></span><br><span class="line">N = <span class="number">100</span></span><br><span class="line">random_x = np.linspace(<span class="number">0</span>, <span class="number">1</span>, N)           <span class="comment"># 创建 x</span></span><br><span class="line">random_y0 = np.random.randn(N) + <span class="number">5</span>        <span class="comment">#   y0</span></span><br><span class="line">random_y1 = np.random.randn(N)            <span class="comment">#   y1</span></span><br><span class="line">random_y2 = np.random.randn(N) - <span class="number">5</span>        <span class="comment">#   y2</span></span><br><span class="line"></span><br><span class="line">fig = go.Figure()                         <span class="comment">#  创建画布</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Add traces</span></span><br><span class="line">fig.add_trace(go.Scatter(x=random_x, y=random_y0, mode=<span class="string">&#x27;markers&#x27;</span>, name=<span class="string">&#x27;markers&#x27;</span>))                <span class="comment"># markers</span></span><br><span class="line">fig.add_trace(go.Scatter(x=random_x, y=random_y1, mode=<span class="string">&#x27;lines+markers&#x27;</span>, name=<span class="string">&#x27;lines+markers&#x27;</span>))    <span class="comment"># lines + markers</span></span><br><span class="line">fig.add_trace(go.Scatter(x=random_x, y=random_y2, mode=<span class="string">&#x27;lines&#x27;</span>, name=<span class="string">&#x27;lines&#x27;</span>))                    <span class="comment"># lines</span></span><br><span class="line"></span><br><span class="line">fig.show()</span><br></pre></td></tr></table></figure><p><img src= "/img/loading.gif" data-lazy-src="https://i.loli.net/2020/11/16/4moGNO5AeIY3Uph.png"></p><blockquote><p>先写这么多吧，下次再写吧<del>~</del></p></blockquote>]]></content>
    
    
      
      
    <summary type="html">&lt;h3 id=&quot;可视化开发库Plotly使用教程（一）&quot;&gt;&lt;a href=&quot;#可视化开发库Plotly使用教程（一）&quot; class=&quot;headerlink&quot; title=&quot;可视化开发库Plotly使用教程（一）&quot;&gt;&lt;/a&gt;可视化开发库Plotly使用教程（一）&lt;/h3&gt;&lt;p&gt;&lt;i</summary>
      
    
    
    
    
    <category term="学习" scheme="https://penggewudi.github.io/tags/%E5%AD%A6%E4%B9%A0/"/>
    
    <category term="plotly" scheme="https://penggewudi.github.io/tags/plotly/"/>
    
  </entry>
  
  <entry>
    <title>Embedding的说明</title>
    <link href="https://penggewudi.github.io/2020/11/13/Embedding%E7%AE%80%E4%BB%8B/"/>
    <id>https://penggewudi.github.io/2020/11/13/Embedding%E7%AE%80%E4%BB%8B/</id>
    <published>2020-11-13T08:14:33.000Z</published>
    <updated>2020-11-19T09:07:25.707Z</updated>
    
    <content type="html"><![CDATA[<h3 id="介绍"><a href="#介绍" class="headerlink" title="介绍"></a>介绍</h3><p>Embedding这个词直接翻译过来就是嵌入的意思，pytorch 中embedding的解释如下<a href="https://pytorch.org/docs/1.7.0/generated/torch.nn.Embedding.html?highlight=embedding#torch.nn.Embedding">link</a></p><blockquote><p>A simple lookup table that stores embeddings of a fixed dictionary and size. This module is often used to store word embeddings and retrieve them using indices. The input to the module is a list of indices, and the output is the corresponding word embeddings.</p></blockquote><p>一个简单的储存固定大小词典的嵌入向量的查找表，给定相应的编号和文字，嵌入层返回其对应的嵌入向量，嵌入向量反映了各个输入编号代表的符号之间的语义关系，模块通常用来存储单词嵌入并使用索引检索</p><p>模块的 <strong>输入</strong>为索引列表，<strong>输出</strong>是相对应的包含上下文语义信息的嵌入向量</p><h3 id="Tips"><a href="#Tips" class="headerlink" title="Tips"></a>Tips</h3><p>我相信大家对于pytorch中embedding的使用已经非常熟悉了，使用起来也比较简单，两行代码就可以解决问题</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> torch </span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">num_embeddings : 表示词典的大小尺寸，假设我们需要输入的一段话里共出现了100个单词，该参数应该设置为100，index为0-99</span></span><br><span class="line"><span class="string">embedding_dim ：表示嵌入向量的维度，也就是说我们可以设置用多少维度的向量来表示一个单词或者编号</span></span><br><span class="line"><span class="string">input:输入</span></span><br><span class="line"><span class="string">output:输出</span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line">embed = torch.nn.Embedding(num_embeddings, embedding_dim) </span><br><span class="line">output = embed(<span class="built_in">input</span>)</span><br></pre></td></tr></table></figure><h3 id="Attention"><a href="#Attention" class="headerlink" title="Attention"></a>Attention</h3><p>在使用Embedding的时候有一点需要注意一下，就是词典大小尺寸以及input中的编号，还是拿上面的num_embeddings参数来举例，num_embeddings设置为100，这就要求我们在输入中的编号小于100，不能大于100，正常情况下我们input中词的编号从0开始，到99结束，参数设置为100是没有问题的，但是如果input中词的编号从100开始，到200结束，我们将词典的大小尺寸设置为100会报错，这种情况下虽然词典的大小不变，但是起始标号改变了，所以我们需要对其进行处理，目前我的解决方案有两种</p><ul><li>直接取input中编号最大的值加1作为num_embeddings</li><li>对input中的编号进行重编码，使其index从0开始, 例如原编号为10,11,12,重编码为0,1,2</li></ul><h3 id="Code-Analysis"><a href="#Code-Analysis" class="headerlink" title="Code Analysis"></a>Code Analysis</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> torch</span><br><span class="line"></span><br><span class="line">a = torch.tensor([[<span class="number">10</span>,<span class="number">12</span>,<span class="number">11</span>],[<span class="number">10</span>,<span class="number">11</span>,<span class="number">10</span>]]) <span class="comment">#(batch_size, max_length)</span></span><br><span class="line">emb = torch.nn.Embedding(<span class="number">3</span>,<span class="number">3</span>)            <span class="comment"># vector embedding</span></span><br><span class="line">print(emb(a))</span><br><span class="line"></span><br><span class="line">a = torch.tensor([[<span class="number">10</span>,<span class="number">12</span>,<span class="number">11</span>],[<span class="number">10</span>,<span class="number">11</span>,<span class="number">10</span>]]) <span class="comment">#(batch_size, max_length)</span></span><br><span class="line">emb = torch.nn.Embedding(<span class="number">13</span>,<span class="number">3</span>)            <span class="comment"># vector embedding</span></span><br><span class="line">print(emb(a))</span><br></pre></td></tr></table></figure><p><img src= "/img/loading.gif" data-lazy-src="https://i.loli.net/2020/11/13/P9g6ZLTNeO2VzjI.png"></p><p><img src= "/img/loading.gif" data-lazy-src="https://i.loli.net/2020/11/13/YvwQdF7oIrJ8HKy.png"></p>]]></content>
    
    
      
      
    <summary type="html">&lt;h3 id=&quot;介绍&quot;&gt;&lt;a href=&quot;#介绍&quot; class=&quot;headerlink&quot; title=&quot;介绍&quot;&gt;&lt;/a&gt;介绍&lt;/h3&gt;&lt;p&gt;Embedding这个词直接翻译过来就是嵌入的意思，pytorch 中embedding的解释如下&lt;a href=&quot;https://pyto</summary>
      
    
    
    
    
    <category term="pytorch" scheme="https://penggewudi.github.io/tags/pytorch/"/>
    
    <category term="学习" scheme="https://penggewudi.github.io/tags/%E5%AD%A6%E4%B9%A0/"/>
    
  </entry>
  
  <entry>
    <title>Theme Change to HEXO-butterfly</title>
    <link href="https://penggewudi.github.io/2020/11/07/hello-world/"/>
    <id>https://penggewudi.github.io/2020/11/07/hello-world/</id>
    <published>2020-11-07T08:40:17.948Z</published>
    <updated>2020-11-13T03:17:48.613Z</updated>
    
    <content type="html"><![CDATA[<p>滴滴滴，终于找到了一个好好看的hexo主题, butterfly(如蝴蝶一般美丽) 没毛病好吧,反正我觉得比next好看的多得多，基本上也不用怎么魔改，按照作者给出的文档一步步的配置就已经可以达到一个很美观的效果啦<del>~</del></p><p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo new <span class="string">&quot;My New Post&quot;</span></span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;滴滴滴，终于找到了一个好好看的hexo主题, butterfly(如蝴蝶一般美丽) 没毛病好吧,反正我觉得比next好看的多得多，基本上也不用怎么魔改，按照作者给出的文档一步步的配置就已经可以达到一个很美观的效果啦&lt;del&gt;~&lt;/del&gt;&lt;/p&gt;
&lt;p&gt;Welcome to</summary>
      
    
    
    
    
    <category term="建站" scheme="https://penggewudi.github.io/tags/%E5%BB%BA%E7%AB%99/"/>
    
  </entry>
  
  <entry>
    <title>LSTM/GRU 处理定长/非定长数据 结果输出</title>
    <link href="https://penggewudi.github.io/2020/11/07/LSTM-GRU-%E5%A4%84%E7%90%86%E5%AE%9A%E9%95%BF-%E9%9D%9E%E5%AE%9A%E9%95%BF%E6%95%B0%E6%8D%AE-%E7%BB%93%E6%9E%9C%E8%BE%93%E5%87%BA/"/>
    <id>https://penggewudi.github.io/2020/11/07/LSTM-GRU-%E5%A4%84%E7%90%86%E5%AE%9A%E9%95%BF-%E9%9D%9E%E5%AE%9A%E9%95%BF%E6%95%B0%E6%8D%AE-%E7%BB%93%E6%9E%9C%E8%BE%93%E5%87%BA/</id>
    <published>2020-11-07T07:49:22.000Z</published>
    <updated>2020-11-08T01:38:54.232Z</updated>
    
    <content type="html"><![CDATA[<h3 id="LSTM-GRU-处理定长-非定长数据-输出"><a href="#LSTM-GRU-处理定长-非定长数据-输出" class="headerlink" title="LSTM / GRU 处理定长/非定长数据 输出"></a>LSTM / GRU 处理定长/非定长数据 输出</h3><p>在利用LSTM/GRU等循环神经网络处理序列数据时，我们会考虑到网络的输出，由于之前对于LSTM/GRU都是直接调用pytorch的库函数，大概的看了一下官网的tutorial ,了解网络的输入与输出，大多数情况下使用起来也是没有问题的，但是在最近的一次实验中翻车了，不得不让我重新对其机制进行深入的学习和了解。</p><h3 id="LSTM-GRU简介"><a href="#LSTM-GRU简介" class="headerlink" title="LSTM/GRU简介"></a>LSTM/GRU简介</h3><p>如果你对lstm/gru网络不是很熟悉和了解，可以参考下面两篇知乎文章，或者台大李宏毅老师的ppt或课程视频，贴一下链接吧~</p><p><a href="https://zhuanlan.zhihu.com/p/32085405">LSTM</a> <a href="https://zhuanlan.zhihu.com/p/32481747">GRU</a> <a href="https://www.bilibili.com/video/BV1JE411g7XF?p=20">RNN video</a><br>RNN Slide(<a href="http://speech.ee.ntu.edu.tw/~tlkagk/courses/ML_2016/Lecture/RNN%20(v2).pdf">http://speech.ee.ntu.edu.tw/~tlkagk/courses/ML_2016/Lecture/RNN%20(v2).pdf</a>)</p><h3 id="模型输出（定长数据）"><a href="#模型输出（定长数据）" class="headerlink" title="模型输出（定长数据）"></a>模型输出（定长数据）</h3><p>这是本文讨论的主要问题，在我们平时使用LSTM/GRU网络时，大多数情况下数据数据为定长多维数据，</p><p>input （暂不考虑隐层初始输入和记忆单元初始输入） 为  <strong>[batch_size, seq_len, input_dim]</strong>, </p><p>output（暂不考虑隐层初始输出和记忆单元初始输出)  为 <strong>[batch_size, seq_len, hidden_dim]</strong></p><p>我们假设模型为单层LSTM/GRU，即layer=1</p><p>这时我们的输出为 output, h_n </p><p>官方解释<br><strong>output shape</strong>: <em>tensor containing the output features h_t from the last layer of the GRU, for each t</em></p><p><strong>h_n shape</strong>: <em>tensor containing the hidden state for t = seq_len</em></p><p>h_n 的size 为 <strong>[layer, batch_size, hidden_dim]</strong>, output的size为 <strong>[batch_size, seq_len, hidden_dim]</strong></p><p>可以认为 <strong>h_n [0]==output[:,-1,:]</strong> 可以任取其中一种方式输出</p><h3 id="模型输出（非定长数据）"><a href="#模型输出（非定长数据）" class="headerlink" title="模型输出（非定长数据）"></a>模型输出（非定长数据）</h3><p>而处理非定长数据时，且batch_size 不等于1的时候，一般需要进行pack pad操作<a href="https://blog.csdn.net/guofei_fly/article/details/104053532">简介</a></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> torch.nn.utils.rnn <span class="keyword">import</span> pack_padded_sequence, pad_packed_sequence</span><br></pre></td></tr></table></figure><p>输入数据的长度也应该根据从大大小的顺序进行排列，在这种情况下的输出结果应该要把隐层的状态作为输出，考虑到output时间序列的最后一层可能存在空值的情况，同上假设layer =1, 应该输出为 <strong>h_n [0]</strong> 输出结果,不能使用output[:,-1,:]作为输出结果</p><h3 id="Code-Analysis-take-GRU-for-example"><a href="#Code-Analysis-take-GRU-for-example" class="headerlink" title="Code Analysis(take GRU for example)"></a>Code Analysis(take GRU for example)</h3><h4 id="定长数据分析"><a href="#定长数据分析" class="headerlink" title="定长数据分析"></a>定长数据分析</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> torch <span class="keyword">as</span> t</span><br><span class="line"><span class="keyword">from</span> torch.nn.utils.rnn <span class="keyword">import</span> pack_padded_sequence, pad_packed_sequence</span><br><span class="line"></span><br><span class="line">a = t.tensor([[<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>],[<span class="number">4</span>,<span class="number">5</span>,<span class="number">6</span>],[<span class="number">7</span>,<span class="number">8</span>,<span class="number">9</span>]]) <span class="comment">#(batch_size, max_length)</span></span><br><span class="line"></span><br><span class="line">emb = t.nn.Embedding(<span class="number">20</span>,<span class="number">2</span>,padding_idx=<span class="number">0</span>)</span><br><span class="line">gru = t.nn.GRU(input_size=<span class="number">2</span>, hidden_size=<span class="number">4</span>, batch_first=<span class="literal">True</span>)</span><br><span class="line"></span><br><span class="line">a_input = emb(a)</span><br><span class="line">output, h_n = gru(a_input)</span><br><span class="line">print(output[:,<span class="number">-1</span>,:])</span><br><span class="line">print(h_n[<span class="number">0</span>])</span><br><span class="line">print(output[:,<span class="number">-1</span>,:]==output[:,<span class="number">-1</span>,:])</span><br></pre></td></tr></table></figure><h4 id="结果"><a href="#结果" class="headerlink" title="结果"></a>结果</h4><p><img src= "/img/loading.gif" data-lazy-src="https://i.loli.net/2020/11/07/vxjN52GLKXyBQU7.png" alt="image.png"></p><h4 id="非定长数据分析"><a href="#非定长数据分析" class="headerlink" title="非定长数据分析"></a>非定长数据分析</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> torch <span class="keyword">as</span> t</span><br><span class="line"><span class="keyword">from</span> torch.nn.utils.rnn <span class="keyword">import</span> pack_padded_sequence, pad_packed_sequence</span><br><span class="line"></span><br><span class="line">a = t.tensor([[<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>],[<span class="number">6</span>,<span class="number">0</span>,<span class="number">0</span>],[<span class="number">4</span>,<span class="number">5</span>,<span class="number">0</span>]]) <span class="comment">#(batch_size, max_length)</span></span><br><span class="line">top_lens = t.tensor([<span class="number">3</span>,<span class="number">1</span>,<span class="number">2</span>])       </span><br><span class="line"></span><br><span class="line">emb = t.nn.Embedding(<span class="number">20</span>,<span class="number">2</span>,padding_idx=<span class="number">0</span>)   <span class="comment"># vector embedding</span></span><br><span class="line">gru = t.nn.GRU(input_size=<span class="number">2</span>, hidden_size=<span class="number">4</span>, batch_first=<span class="literal">True</span>)</span><br><span class="line"></span><br><span class="line">a_input = emb(a)</span><br><span class="line">lens_top, idx_sort_top, idx_unsort_top = sort_lens(top_lens)  <span class="comment"># sort length</span></span><br><span class="line">a_input = a_input.index_select(<span class="number">0</span>, idx_sort_top)</span><br><span class="line"></span><br><span class="line">a_packed_input = pack_padded_sequence(<span class="built_in">input</span>=a_input, lengths=lens_top, batch_first=<span class="literal">True</span>)</span><br><span class="line">output, h_n = gru(a_packed_input)</span><br><span class="line">out, _ = pad_packed_sequence(output, batch_first=<span class="literal">True</span>)</span><br><span class="line"></span><br><span class="line">lens_top = lens_top.index_select(<span class="number">0</span>, idx_unsort_top)</span><br><span class="line">out = out.index_select(<span class="number">0</span>, idx_unsort_top)</span><br><span class="line"></span><br><span class="line">print(out[:,<span class="number">-1</span>,:])</span><br><span class="line">print(h_n[<span class="number">0</span>])</span><br><span class="line">print(out[:,<span class="number">-1</span>,:]==h_n[<span class="number">0</span>])</span><br></pre></td></tr></table></figure><h4 id="结果-1"><a href="#结果-1" class="headerlink" title="结果"></a>结果</h4><p><img src= "/img/loading.gif" data-lazy-src="https://i.loli.net/2020/11/07/13phqF74MItRQP5.png" alt="image.png"></p>]]></content>
    
    
      
      
    <summary type="html">&lt;h3 id=&quot;LSTM-GRU-处理定长-非定长数据-输出&quot;&gt;&lt;a href=&quot;#LSTM-GRU-处理定长-非定长数据-输出&quot; class=&quot;headerlink&quot; title=&quot;LSTM / GRU 处理定长/非定长数据 输出&quot;&gt;&lt;/a&gt;LSTM / GRU 处理定长/非定</summary>
      
    
    
    
    
    <category term="学习" scheme="https://penggewudi.github.io/tags/%E5%AD%A6%E4%B9%A0/"/>
    
  </entry>
  
  <entry>
    <title>Git的使用说明</title>
    <link href="https://penggewudi.github.io/2020/06/15/Git%E7%9A%84%E4%BD%BF%E7%94%A8%E8%AF%B4%E6%98%8E/"/>
    <id>https://penggewudi.github.io/2020/06/15/Git%E7%9A%84%E4%BD%BF%E7%94%A8%E8%AF%B4%E6%98%8E/</id>
    <published>2020-06-15T08:22:49.000Z</published>
    <updated>2020-11-08T01:40:34.790Z</updated>
    
    <content type="html"><![CDATA[<img src= "/img/loading.gif" data-lazy-src="https://i.loli.net/2020/06/14/puywSXPxgH5hOcQ.png" alt="git" style="zoom: 25%;"><h4 id="Git的使用说明介绍"><a href="#Git的使用说明介绍" class="headerlink" title="Git的使用说明介绍"></a>Git的使用说明介绍</h4><p>Git是我们程序员日常开发中必不可少的一个开发工具，可以有效地帮助我们进行开发项目的版本控制，团队写作等，极大地方便了我们的开发工作，刚好最近学习了git的相关的知识内容，我将会把常用的命令和解释罗列出来方便大家的参考，也方便我自己日后的回顾。</p><h4 id="安装配置"><a href="#安装配置" class="headerlink" title="安装配置"></a>安装配置</h4><p>首先需要下载git <a href="https://git-scm.com/">官方下载网址</a>，下载完成之后，按照说明进行安装，然后正常情况下就会出现两个安装好的程序<code>git base</code>和<code>git gui</code>,在我们平常的使用中我们一般都使用<code>git base</code>这个程序，点开之后我们发现其界面和操作逻辑和linux的中断控制台的逻辑相似所以对于有开发经验的同学来说还是比较容易熟悉和上手的，在控制台(cmd/terminal)中输入下列指令即可参看版本号,若能正常显示则表示安装成功。</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git --version  <span class="comment">#查看 git 版本号</span></span><br></pre></td></tr></table></figure><h4 id="初始配置"><a href="#初始配置" class="headerlink" title="初始配置"></a>初始配置</h4><p>在我们使用git之前，我们首先需要配置相关的用户信息，也就是让git知道每次是谁提交了信息，需要配置用户名称和电子邮箱，配置文件的地址为<code>~/.gitconfig</code>,这个文件是执行任何git命令后自动创建的，默认的文件位置在当前用户名的下<code>C:\Users\your user name\~</code>,按照如下代码进行配置，配置完成后不放心的话可以去找上面的文件查看核对一下。</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">git config --global user.email <span class="string">&quot;********&quot;</span>    <span class="comment"># 将*替换成你的个人信息即可</span></span><br><span class="line">git config --global user.name  <span class="string">&quot;**&quot;</span></span><br></pre></td></tr></table></figure><h4 id="建立仓库并初始化"><a href="#建立仓库并初始化" class="headerlink" title="建立仓库并初始化"></a>建立仓库并初始化</h4><p>在我们安装完git之后，我们需要初始化我们的仓库了，首先我们需要新建一个文件夹，为了方便操作，所有的命令都在<code>git base</code>里操作进行了，下面将命令都写入下面的代码块中，这样一个简单的库就算建立完成了，虽然什么文件都没有</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">mkdir file    <span class="comment"># 创建文件夹</span></span><br><span class="line"><span class="built_in">cd</span>    file    <span class="comment"># 进入 file 文件夹目录</span></span><br><span class="line">git  init     <span class="comment"># 初始化空仓库，自动建立一个 master 主分支</span></span><br></pre></td></tr></table></figure><h4 id="常用的git命令"><a href="#常用的git命令" class="headerlink" title="常用的git命令"></a>常用的git命令</h4><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line">git <span class="built_in">clone</span> git@github.com:penggewudi/penggewudi.github.io.git <span class="comment"># 克隆仓库</span></span><br><span class="line"></span><br><span class="line">git add [file]      <span class="comment"># 添加文件到暂存区</span></span><br><span class="line">git add .           <span class="comment"># 将所有文件添加到暂存区</span></span><br><span class="line"></span><br><span class="line">git status          <span class="comment"># 查看当前仓库的状态</span></span><br><span class="line"></span><br><span class="line">git <span class="built_in">log</span>             <span class="comment"># 查看仓库的提交日志</span></span><br><span class="line">git <span class="built_in">log</span> -p          <span class="comment"># 查看仓库的提交日志的详细信息</span></span><br><span class="line">git <span class="built_in">log</span> -p -2       <span class="comment"># 查看仓库的提交日志的最近两次的详细信息</span></span><br><span class="line">git <span class="built_in">log</span> --name-only <span class="comment"># 查看哪些文件的名称发生了变化</span></span><br><span class="line"></span><br><span class="line">git commit -m <span class="string">&quot;commit message&quot;</span>  <span class="comment"># 提交文件内容至仓库并且记录提交信息</span></span><br><span class="line">git commit --amend  <span class="comment"># 修改最近的一次提交</span></span><br><span class="line"></span><br><span class="line">git rm  [file]      <span class="comment"># 删除提交过的文件</span></span><br><span class="line">git rm --cached [file]  <span class="comment"># 删除没有提交到仓库的文件</span></span><br><span class="line"></span><br><span class="line">git checkout [branch name]  <span class="comment"># 切换分支</span></span><br><span class="line">git checkout --file <span class="comment"># 恢复到提交前的状态</span></span><br><span class="line">git checkout -b [branch name] <span class="comment"># 新建分支并且进入到新建分支</span></span><br><span class="line"></span><br><span class="line">git branch          <span class="comment"># 查看当前仓库的分支</span></span><br><span class="line">git branch -a       <span class="comment"># 查看远程分支</span></span><br><span class="line">git branch [branch name]    <span class="comment"># 创建分支</span></span><br><span class="line">git branch -d [branch name] <span class="comment">#删除分支</span></span><br><span class="line"></span><br><span class="line">git merge [branch name]  <span class="comment">#合并分支</span></span><br><span class="line">git rebase   master      <span class="comment"># 将分叉的分支重新合并   详情可以参考这篇文章或者下方视频https://www.jianshu.com/p/f7ed3dd0d2d8</span></span><br><span class="line"></span><br><span class="line">git tag [tag name]       <span class="comment">#给当前版本打标签</span></span><br><span class="line"></span><br><span class="line">git archive master --prefix=<span class="string">&#x27;file path&#x27;</span> --forma=zip &gt; file.zip   </span><br><span class="line"><span class="comment">#生成zip代码发布压缩包</span></span><br></pre></td></tr></table></figure><p>下面罗列出来两种常见的git使用方式，一种是从服务器端拉取仓库，另外一种是将本地仓库推送至服务器端</p><h4 id="从远程服务器-github-获得仓库修改提交"><a href="#从远程服务器-github-获得仓库修改提交" class="headerlink" title="从远程服务器(github)获得仓库修改提交"></a>从远程服务器(github)获得仓库修改提交</h4><ul><li><p>首先克隆项目</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git <span class="built_in">clone</span> git@github.com:penggewudi/penggewudi.github.io.git</span><br></pre></td></tr></table></figure></li><li><p>将所有文件添加到暂存区</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git add .</span><br></pre></td></tr></table></figure></li><li><p>创建文件的提交，只是提交至本地仓库</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git commit -m <span class="string">&#x27;modified commit&#x27;</span></span><br></pre></td></tr></table></figure></li><li><p>将代码提交至远端服务器</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git push</span><br></pre></td></tr></table></figure></li></ul><h4 id="将本地项目提交至远端服务器-github"><a href="#将本地项目提交至远端服务器-github" class="headerlink" title="将本地项目提交至远端服务器(github)"></a>将本地项目提交至远端服务器(github)</h4><ul><li><p>首先需要在github端新建一个仓库，得到仓库的ssh链接</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git@github.com:penggewudi/penggewudi.github.io.git</span><br></pre></td></tr></table></figure></li><li><p>创建本地的仓库完成初始化提交</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">git init</span><br><span class="line">git add .</span><br><span class="line">git commit -m <span class="string">&quot;first commit&quot;</span></span><br></pre></td></tr></table></figure></li><li><p>添加远程仓库</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git remote add origin git@github.com:penggewudi/penggewudi.github.io.git</span><br></pre></td></tr></table></figure></li><li><p>查看远程仓库</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git remote -v</span><br></pre></td></tr></table></figure></li><li><p>将本地仓库数据推送到远程仓库主分支</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">git push -u origin master</span><br><span class="line">git push -u origin master  -f  <span class="comment"># 强制推送，覆盖服务器端主分支仓库</span></span><br></pre></td></tr></table></figure></li><li><p>删除远端仓库关联</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git remote rm origin</span><br></pre></td></tr></table></figure></li></ul><h4 id="pull-amp-push"><a href="#pull-amp-push" class="headerlink" title="pull &amp; push"></a>pull &amp; push</h4><ul><li><p>拉取origin主机的ask分支与本地的master分支合并 </p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git pull origin ask:ask</span><br></pre></td></tr></table></figure></li><li><p>拉取origin主机的ask分支与当前分支合并 </p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git pull origin ask</span><br></pre></td></tr></table></figure></li><li><p>如果远程分支与当前本地分支同名直接执行 </p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git pull</span><br></pre></td></tr></table></figure></li><li><p>将当前分支推送到origin主机的对应分支(如果当前分支只有一个追踪分支 ，可省略主机名)</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git push origin</span><br></pre></td></tr></table></figure></li><li><p>使用-u选项指定一个默认主机 ,这样以后就可以不加任何参数直播使用<code>git push</code></p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git push -u origin master</span><br></pre></td></tr></table></figure></li><li><p>删除远程ask分支</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git push origin --delete ask</span><br></pre></td></tr></table></figure></li><li><p>本地ask分支关联远程分支推送</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git push --set-upstream origin ask</span><br></pre></td></tr></table></figure></li></ul><h4 id="其他"><a href="#其他" class="headerlink" title="其他"></a>其他</h4><p>还有一些其他的内容，包括.gitignore文件的添加，定义alias快捷键等等,这部分就先ignore了</p><ul><li>所有空行或者以注释符号 ＃ 开头的行都会被 Git 忽略。</li><li>匹配模式最后跟反斜杠（/）说明要忽略的是目录。</li></ul><blockquote><p>另外我在b站发现了一个比较好的入门视频教程，讲的比较清晰和直观，给出的命令都是平时开发中高频使用的，有需要可以自行观看<a href="https://www.bilibili.com/video/BV154411g7Wm/">click here</a></p></blockquote><hr><p> <strong><em>Attention</em></strong>  : 在写完这篇markdown 上传到github pages的时候呢，出现了一点问题，不论我怎么修改格式，代码块的部分总是乱做一团，我以为是我的语法写的不是很准确，检查了长时间后发现在这篇文章的前后段落我分别加上在前后加上了三个波浪线，在 Hexo进行渲染的时候默认把前后三个波浪线中的content当成了代码块，结果导致了splash出现问题，我也感到很无语，看来后面写的话还是老老实实整点实用的，花里胡哨的东西还是要尽量避免哈哈</p><iframe src="//player.bilibili.com/player.html?aid=56582999&bvid=BV154411g7Wm&cid=98860225&page=35" frameborder="no" scrolling="no" width="95%" height="600"></iframe><p></p>]]></content>
    
    
      
      
    <summary type="html">&lt;img src= &quot;/img/loading.gif&quot; data-lazy-src=&quot;https://i.loli.net/2020/06/14/puywSXPxgH5hOcQ.png&quot; alt=&quot;git&quot; style=&quot;zoom: 25%;&quot;&gt;

&lt;h4 id=&quot;Git的使用</summary>
      
    
    
    
    
    <category term="Git" scheme="https://penggewudi.github.io/tags/Git/"/>
    
  </entry>
  
  <entry>
    <title>ReStart</title>
    <link href="https://penggewudi.github.io/2020/06/13/ReStart/"/>
    <id>https://penggewudi.github.io/2020/06/13/ReStart/</id>
    <published>2020-06-13T14:01:56.000Z</published>
    <updated>2020-11-08T01:41:54.467Z</updated>
    
    <content type="html"><![CDATA[<p>时间过得飞快，距离上一次写这个blog以及有几乎两年之久了，依稀还记得当时熬夜配置HEXO框架的情形，迫不及待的上传了第一篇的blog到github pages的场景，似乎那时候又用不完的精力去折腾去玩，后来应为考研的缘故也手上所有的东西就先放下来了，没有时间去玩了，陪伴的就只是试卷和题目了，时至今日也算是如愿以偿的成为了一名渣渣研究生，我想也是时候慢慢的把自己的blog捡起来了，我觉得可以在这里分享一下我的学习过程和采坑过程，要不然的话同时有一种啥也没有学到手的感觉，内心空荡荡<del>~</del></p><ul><li>记录学习的内容，分享学习的一些心得</li><li>记录自己的踩坑的问题和经验，方便日后查看和回顾</li><li>写点有的没的，哈哈哈</li></ul> <iframe frameborder="no" border="0" marginwidth="0" marginheight="0" width="330" height="86" src="//music.163.com/outchain/player?type=2&id=1418766731&auto=0&height=66"></iframe>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;时间过得飞快，距离上一次写这个blog以及有几乎两年之久了，依稀还记得当时熬夜配置HEXO框架的情形，迫不及待的上传了第一篇的blog到github pages的场景，似乎那时候又用不完的精力去折腾去玩，后来应为考研的缘故也手上所有的东西就先放下来了，没有时间去玩了，陪伴的</summary>
      
    
    
    
    
    <category term="学习" scheme="https://penggewudi.github.io/tags/%E5%AD%A6%E4%B9%A0/"/>
    
  </entry>
  
  <entry>
    <title>随笔</title>
    <link href="https://penggewudi.github.io/2018/06/22/%E9%9A%8F%E7%AC%94/"/>
    <id>https://penggewudi.github.io/2018/06/22/%E9%9A%8F%E7%AC%94/</id>
    <published>2018-06-22T13:31:59.000Z</published>
    <updated>2020-11-08T01:46:42.416Z</updated>
    
    <content type="html"><![CDATA[<p>我发现冰岛真的是一个神奇的国家，只有几十万人口的小国竟然踢进了世界杯而且踢平了阿根廷，真的是难以置信，但是后来我发现维京后裔是真的强，而且看到下面这张图真的感觉……</p><p>冰岛是我世界杯快乐之源泉，哈哈哈<del>~</del></p><iframe frameborder="no" border="0" marginwidth="0" marginheight="0" width="330" height="86" src="//music.163.com/outchain/player?type=2&id=27560007&auto=0&height=66"></iframe>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;我发现冰岛真的是一个神奇的国家，只有几十万人口的小国竟然踢进了世界杯而且踢平了阿根廷，真的是难以置信，但是后来我发现维京后裔是真的强，而且看到下面这张图真的感觉……&lt;/p&gt;
&lt;p&gt;冰岛是我世界杯快乐之源泉，哈哈哈&lt;del&gt;~&lt;/del&gt;&lt;/p&gt;
&lt;iframe frameb</summary>
      
    
    
    
    
    <category term="随笔" scheme="https://penggewudi.github.io/tags/%E9%9A%8F%E7%AC%94/"/>
    
  </entry>
  
  <entry>
    <title>Computer Operation System</title>
    <link href="https://penggewudi.github.io/2018/06/10/Computer-Operation-System/"/>
    <id>https://penggewudi.github.io/2018/06/10/Computer-Operation-System/</id>
    <published>2018-06-10T12:48:49.000Z</published>
    <updated>2020-11-08T01:48:07.063Z</updated>
    
    <content type="html"><![CDATA[<h2 id="操作系统打卡"><a href="#操作系统打卡" class="headerlink" title="操作系统打卡~"></a>操作系统打卡<del>~</del></h2><h3 id="老师的声音很好听，讲的也非常仔细，比喻之王，哈哈哈"><a href="#老师的声音很好听，讲的也非常仔细，比喻之王，哈哈哈" class="headerlink" title="老师的声音很好听，讲的也非常仔细，比喻之王，哈哈哈~"></a>老师的声音很好听，讲的也非常仔细，比喻之王，哈哈哈~</h3><blockquote><p><a href="https://www.bilibili.com/video/av12787154/?p=1">click here for more</a></p></blockquote>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;操作系统打卡&quot;&gt;&lt;a href=&quot;#操作系统打卡&quot; class=&quot;headerlink&quot; title=&quot;操作系统打卡~&quot;&gt;&lt;/a&gt;操作系统打卡&lt;del&gt;~&lt;/del&gt;&lt;/h2&gt;&lt;h3 id=&quot;老师的声音很好听，讲的也非常仔细，比喻之王，哈哈哈&quot;&gt;&lt;a href=&quot;</summary>
      
    
    
    
    
    <category term="学习" scheme="https://penggewudi.github.io/tags/%E5%AD%A6%E4%B9%A0/"/>
    
    <category term="考研" scheme="https://penggewudi.github.io/tags/%E8%80%83%E7%A0%94/"/>
    
  </entry>
  
  <entry>
    <title>Lanch Github Pages &amp; Hexo</title>
    <link href="https://penggewudi.github.io/2018/06/06/Lanch-Github-Pages-Hexo/"/>
    <id>https://penggewudi.github.io/2018/06/06/Lanch-Github-Pages-Hexo/</id>
    <published>2018-06-06T01:34:23.000Z</published>
    <updated>2020-11-08T01:49:20.547Z</updated>
    
    <content type="html"><![CDATA[<p>今天无意间打开了一篇博客，讲到了github page建站的东西，很是感兴趣，因为之前也搞过一段时间的Wordpress，不知道为啥，搞这种很有个性的骚动西总是能吊足我的胃口，我觉得不吃不喝都可以。回想起我之前的建站经历</p><blockquote><p> <del>那是相当的顺利</del> 一句</p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$  Rm-rf</span><br></pre></td></tr></table></figure><p>贯穿了我整个建站之路。</p><p><img src= "/img/loading.gif" data-lazy-src="https://i.loli.net/2018/06/22/5b2cf225c2abe.jpg" alt="MarkLite"></p><h3 id="先忏悔一下🌚"><a href="#先忏悔一下🌚" class="headerlink" title="先忏悔一下🌚"></a>先忏悔一下🌚</h3><ol><li><p>现在想想当时踩了那么多的坑，花了那么多的时间，去配置环境，现在一行code所有的努力好像都付之东流了😭就感觉少活了一段时间似的，血亏。</p></li><li><p>本来是考研看书时间，我又手贱的点开了知乎、csdn、github、简书…..然后我就知道今天一天就会被邪恶的电脑所吞噬了，看来下次不能带电脑了😂🌚😭忏悔一下忏悔一下。</p></li></ol><h3 id="分享一下我的感受吧。"><a href="#分享一下我的感受吧。" class="headerlink" title="分享一下我的感受吧。"></a>分享一下我的感受吧。</h3><p><img src= "/img/loading.gif" data-lazy-src="https://i.loli.net/2018/06/22/5b2cf260cfd6c.jpg" alt="MarkLite"></p><ol><li><p>首先从建站的难度上来说，因为我之前熟悉过git已经github的使用，相对来说，并没有那么困难，只需要再依赖一下node.js就可以了，环境配置基本很顺利。</p></li><li><p>hexo确实是一个很好的静态网站平台，而且访问可以依托于github，说到底，还是我大github威武，开源大法好！（好像github要被微软爸爸收购了，希望他们强强联手共同建造一个好的开源生态，撒花）github page 可以请让我们发布一个网站，你只需要把你想要发布的数据上传到仓库就可以了，就和上传你的code一样，很方便，而且最重要的是免费的！！！所以只要github还在，那么我们就可以一直挂载我们的博客，想想能省钱买很多肥宅快乐水就很开心🤣。</p></li><li><p>是不是就一点问题也没有呢，那肯定不是的啦，由于是静态的网页，所以虽然环境的搭建没有较多繁琐的过程，其本身的配置需要花一点时间去学习，没有GUI，只能对照着文档来进行修改config文件，你可以选择很多的主题，然后再去修改相应主题的config文件，balabalbala的一大推，期间我也遇到过一些解决不了的bug或误操作删掉了一些参数，只需要重新clone 主题的git，然后重新操作，不怕翻车。因为我不是学cs出生的，本身对于前端的知识也不是很懂，很多东西只是了解其功能以及使用，并没有过多的深入去了解，所以还需要后续的补充。见谅。</p></li><li><p>虽然github在国内是可以访问的，但是还是慢啊😪加载慢，上传也慢，今天上传的时候40k/s，不知道是什么原因，而且上传之后github并没有更新，problem+1，等待后续的测试啦。</p></li></ol><h3 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h3><ul><li>In a word ，建站告一段落，零零碎碎的还有一些问题，markdown的基本的语法还需要巩固一下，一些常用的插件还需要补足之类的，，然后有时间的话就写写心得技术贴shade，没时间就算了🤣时间不早啦，溜…</li></ul><iframe frameborder="no" border="0" marginwidth="0" marginheight="0" width="330" height="86" src="//music.163.com/outchain/player?type=2&id=41653419&auto=0&height=66"></iframe>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;今天无意间打开了一篇博客，讲到了github page建站的东西，很是感兴趣，因为之前也搞过一段时间的Wordpress，不知道为啥，搞这种很有个性的骚动西总是能吊足我的胃口，我觉得不吃不喝都可以。回想起我之前的建站经历&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt; &lt;del&gt;</summary>
      
    
    
    
    
    <category term="建站" scheme="https://penggewudi.github.io/tags/%E5%BB%BA%E7%AB%99/"/>
    
  </entry>
  
</feed>
