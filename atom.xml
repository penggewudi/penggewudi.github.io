<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>人生苦短</title>
  
  <subtitle>喜而不狂，忧而不伤~</subtitle>
  <link href="https://penggewudi.github.io/atom.xml" rel="self"/>
  
  <link href="https://penggewudi.github.io/"/>
  <updated>2020-11-08T01:36:37.258Z</updated>
  <id>https://penggewudi.github.io/</id>
  
  <author>
    <name>Shiny Peng</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>Hello World</title>
    <link href="https://penggewudi.github.io/2020/11/07/hello-world/"/>
    <id>https://penggewudi.github.io/2020/11/07/hello-world/</id>
    <published>2020-11-07T08:40:17.948Z</published>
    <updated>2020-11-08T01:36:37.258Z</updated>
    
    <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo new <span class="string">&quot;My New Post&quot;</span></span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;Welcome to &lt;a href=&quot;https://hexo.io/&quot;&gt;Hexo&lt;/a&gt;! This is your very first post. Check &lt;a href=&quot;https://hexo.io/docs/&quot;&gt;documentation&lt;/a&gt; for</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title>LSTM/GRU 处理定长/非定长数据 结果输出</title>
    <link href="https://penggewudi.github.io/2020/11/07/LSTM-GRU-%E5%A4%84%E7%90%86%E5%AE%9A%E9%95%BF-%E9%9D%9E%E5%AE%9A%E9%95%BF%E6%95%B0%E6%8D%AE-%E7%BB%93%E6%9E%9C%E8%BE%93%E5%87%BA/"/>
    <id>https://penggewudi.github.io/2020/11/07/LSTM-GRU-%E5%A4%84%E7%90%86%E5%AE%9A%E9%95%BF-%E9%9D%9E%E5%AE%9A%E9%95%BF%E6%95%B0%E6%8D%AE-%E7%BB%93%E6%9E%9C%E8%BE%93%E5%87%BA/</id>
    <published>2020-11-07T07:49:22.000Z</published>
    <updated>2020-11-08T01:38:54.232Z</updated>
    
    <content type="html"><![CDATA[<h3 id="LSTM-GRU-处理定长-非定长数据-输出"><a href="#LSTM-GRU-处理定长-非定长数据-输出" class="headerlink" title="LSTM / GRU 处理定长/非定长数据 输出"></a>LSTM / GRU 处理定长/非定长数据 输出</h3><p>在利用LSTM/GRU等循环神经网络处理序列数据时，我们会考虑到网络的输出，由于之前对于LSTM/GRU都是直接调用pytorch的库函数，大概的看了一下官网的tutorial ,了解网络的输入与输出，大多数情况下使用起来也是没有问题的，但是在最近的一次实验中翻车了，不得不让我重新对其机制进行深入的学习和了解。</p><h3 id="LSTM-GRU简介"><a href="#LSTM-GRU简介" class="headerlink" title="LSTM/GRU简介"></a>LSTM/GRU简介</h3><p>如果你对lstm/gru网络不是很熟悉和了解，可以参考下面两篇知乎文章，或者台大李宏毅老师的ppt或课程视频，贴一下链接吧~</p><p><a href="https://zhuanlan.zhihu.com/p/32085405">LSTM</a> <a href="https://zhuanlan.zhihu.com/p/32481747">GRU</a> <a href="https://www.bilibili.com/video/BV1JE411g7XF?p=20">RNN video</a><br>RNN Slide(<a href="http://speech.ee.ntu.edu.tw/~tlkagk/courses/ML_2016/Lecture/RNN%20(v2).pdf">http://speech.ee.ntu.edu.tw/~tlkagk/courses/ML_2016/Lecture/RNN%20(v2).pdf</a>)</p><h3 id="模型输出（定长数据）"><a href="#模型输出（定长数据）" class="headerlink" title="模型输出（定长数据）"></a>模型输出（定长数据）</h3><p>这是本文讨论的主要问题，在我们平时使用LSTM/GRU网络时，大多数情况下数据数据为定长多维数据，</p><p>input （暂不考虑隐层初始输入和记忆单元初始输入） 为  <strong>[batch_size, seq_len, input_dim]</strong>, </p><p>output（暂不考虑隐层初始输出和记忆单元初始输出)  为 <strong>[batch_size, seq_len, hidden_dim]</strong></p><p>我们假设模型为单层LSTM/GRU，即layer=1</p><p>这时我们的输出为 output, h_n </p><p>官方解释<br><strong>output shape</strong>: <em>tensor containing the output features h_t from the last layer of the GRU, for each t</em></p><p><strong>h_n shape</strong>: <em>tensor containing the hidden state for t = seq_len</em></p><p>h_n 的size 为 <strong>[layer, batch_size, hidden_dim]</strong>, output的size为 <strong>[batch_size, seq_len, hidden_dim]</strong></p><p>可以认为 <strong>h_n [0]==output[:,-1,:]</strong> 可以任取其中一种方式输出</p><h3 id="模型输出（非定长数据）"><a href="#模型输出（非定长数据）" class="headerlink" title="模型输出（非定长数据）"></a>模型输出（非定长数据）</h3><p>而处理非定长数据时，且batch_size 不等于1的时候，一般需要进行pack pad操作<a href="https://blog.csdn.net/guofei_fly/article/details/104053532">简介</a></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> torch.nn.utils.rnn <span class="keyword">import</span> pack_padded_sequence, pad_packed_sequence</span><br></pre></td></tr></table></figure><p>输入数据的长度也应该根据从大大小的顺序进行排列，在这种情况下的输出结果应该要把隐层的状态作为输出，考虑到output时间序列的最后一层可能存在空值的情况，同上假设layer =1, 应该输出为 <strong>h_n [0]</strong> 输出结果,不能使用output[:,-1,:]作为输出结果</p><h3 id="Code-Analysis-take-GRU-for-example"><a href="#Code-Analysis-take-GRU-for-example" class="headerlink" title="Code Analysis(take GRU for example)"></a>Code Analysis(take GRU for example)</h3><h4 id="定长数据分析"><a href="#定长数据分析" class="headerlink" title="定长数据分析"></a>定长数据分析</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> torch <span class="keyword">as</span> t</span><br><span class="line"><span class="keyword">from</span> torch.nn.utils.rnn <span class="keyword">import</span> pack_padded_sequence, pad_packed_sequence</span><br><span class="line"></span><br><span class="line">a = t.tensor([[<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>],[<span class="number">4</span>,<span class="number">5</span>,<span class="number">6</span>],[<span class="number">7</span>,<span class="number">8</span>,<span class="number">9</span>]]) <span class="comment">#(batch_size, max_length)</span></span><br><span class="line"></span><br><span class="line">emb = t.nn.Embedding(<span class="number">20</span>,<span class="number">2</span>,padding_idx=<span class="number">0</span>)</span><br><span class="line">gru = t.nn.GRU(input_size=<span class="number">2</span>, hidden_size=<span class="number">4</span>, batch_first=<span class="literal">True</span>)</span><br><span class="line"></span><br><span class="line">a_input = emb(a)</span><br><span class="line">output, h_n = gru(a_input)</span><br><span class="line">print(output[:,<span class="number">-1</span>,:])</span><br><span class="line">print(h_n[<span class="number">0</span>])</span><br><span class="line">print(output[:,<span class="number">-1</span>,:]==output[:,<span class="number">-1</span>,:])</span><br></pre></td></tr></table></figure><h4 id="结果"><a href="#结果" class="headerlink" title="结果"></a>结果</h4><p><img src="https://i.loli.net/2020/11/07/vxjN52GLKXyBQU7.png" alt="image.png"></p><h4 id="非定长数据分析"><a href="#非定长数据分析" class="headerlink" title="非定长数据分析"></a>非定长数据分析</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> torch <span class="keyword">as</span> t</span><br><span class="line"><span class="keyword">from</span> torch.nn.utils.rnn <span class="keyword">import</span> pack_padded_sequence, pad_packed_sequence</span><br><span class="line"></span><br><span class="line">a = t.tensor([[<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>],[<span class="number">6</span>,<span class="number">0</span>,<span class="number">0</span>],[<span class="number">4</span>,<span class="number">5</span>,<span class="number">0</span>]]) <span class="comment">#(batch_size, max_length)</span></span><br><span class="line">top_lens = t.tensor([<span class="number">3</span>,<span class="number">1</span>,<span class="number">2</span>])       </span><br><span class="line"></span><br><span class="line">emb = t.nn.Embedding(<span class="number">20</span>,<span class="number">2</span>,padding_idx=<span class="number">0</span>)   <span class="comment"># vector embedding</span></span><br><span class="line">gru = t.nn.GRU(input_size=<span class="number">2</span>, hidden_size=<span class="number">4</span>, batch_first=<span class="literal">True</span>)</span><br><span class="line"></span><br><span class="line">a_input = emb(a)</span><br><span class="line">lens_top, idx_sort_top, idx_unsort_top = sort_lens(top_lens)  <span class="comment"># sort length</span></span><br><span class="line">a_input = a_input.index_select(<span class="number">0</span>, idx_sort_top)</span><br><span class="line"></span><br><span class="line">a_packed_input = pack_padded_sequence(<span class="built_in">input</span>=a_input, lengths=lens_top, batch_first=<span class="literal">True</span>)</span><br><span class="line">output, h_n = gru(a_packed_input)</span><br><span class="line">out, _ = pad_packed_sequence(output, batch_first=<span class="literal">True</span>)</span><br><span class="line"></span><br><span class="line">lens_top = lens_top.index_select(<span class="number">0</span>, idx_unsort_top)</span><br><span class="line">out = out.index_select(<span class="number">0</span>, idx_unsort_top)</span><br><span class="line"></span><br><span class="line">print(out[:,<span class="number">-1</span>,:])</span><br><span class="line">print(h_n[<span class="number">0</span>])</span><br><span class="line">print(out[:,<span class="number">-1</span>,:]==h_n[<span class="number">0</span>])</span><br></pre></td></tr></table></figure><h4 id="结果-1"><a href="#结果-1" class="headerlink" title="结果"></a>结果</h4><p><img src="https://i.loli.net/2020/11/07/13phqF74MItRQP5.png" alt="image.png"></p>]]></content>
    
    
      
      
    <summary type="html">&lt;h3 id=&quot;LSTM-GRU-处理定长-非定长数据-输出&quot;&gt;&lt;a href=&quot;#LSTM-GRU-处理定长-非定长数据-输出&quot; class=&quot;headerlink&quot; title=&quot;LSTM / GRU 处理定长/非定长数据 输出&quot;&gt;&lt;/a&gt;LSTM / GRU 处理定长/非定</summary>
      
    
    
    
    
    <category term="学习" scheme="https://penggewudi.github.io/tags/%E5%AD%A6%E4%B9%A0/"/>
    
  </entry>
  
  <entry>
    <title>Git的使用说明</title>
    <link href="https://penggewudi.github.io/2020/06/15/Git%E7%9A%84%E4%BD%BF%E7%94%A8%E8%AF%B4%E6%98%8E/"/>
    <id>https://penggewudi.github.io/2020/06/15/Git%E7%9A%84%E4%BD%BF%E7%94%A8%E8%AF%B4%E6%98%8E/</id>
    <published>2020-06-15T08:22:49.000Z</published>
    <updated>2020-11-08T01:40:34.790Z</updated>
    
    <content type="html"><![CDATA[<img src="https://i.loli.net/2020/06/14/puywSXPxgH5hOcQ.png" alt="git" style="zoom: 25%;" /><h4 id="Git的使用说明介绍"><a href="#Git的使用说明介绍" class="headerlink" title="Git的使用说明介绍"></a>Git的使用说明介绍</h4><p>Git是我们程序员日常开发中必不可少的一个开发工具，可以有效地帮助我们进行开发项目的版本控制，团队写作等，极大地方便了我们的开发工作，刚好最近学习了git的相关的知识内容，我将会把常用的命令和解释罗列出来方便大家的参考，也方便我自己日后的回顾。</p><h4 id="安装配置"><a href="#安装配置" class="headerlink" title="安装配置"></a>安装配置</h4><p>首先需要下载git <a href="https://git-scm.com/">官方下载网址</a>，下载完成之后，按照说明进行安装，然后正常情况下就会出现两个安装好的程序<code>git base</code>和<code>git gui</code>,在我们平常的使用中我们一般都使用<code>git base</code>这个程序，点开之后我们发现其界面和操作逻辑和linux的中断控制台的逻辑相似所以对于有开发经验的同学来说还是比较容易熟悉和上手的，在控制台(cmd/terminal)中输入下列指令即可参看版本号,若能正常显示则表示安装成功。</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git --version  <span class="comment">#查看 git 版本号</span></span><br></pre></td></tr></table></figure><h4 id="初始配置"><a href="#初始配置" class="headerlink" title="初始配置"></a>初始配置</h4><p>在我们使用git之前，我们首先需要配置相关的用户信息，也就是让git知道每次是谁提交了信息，需要配置用户名称和电子邮箱，配置文件的地址为<code>~/.gitconfig</code>,这个文件是执行任何git命令后自动创建的，默认的文件位置在当前用户名的下<code>C:\Users\your user name\~</code>,按照如下代码进行配置，配置完成后不放心的话可以去找上面的文件查看核对一下。</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">git config --global user.email <span class="string">&quot;********&quot;</span>    <span class="comment"># 将*替换成你的个人信息即可</span></span><br><span class="line">git config --global user.name  <span class="string">&quot;**&quot;</span></span><br></pre></td></tr></table></figure><h4 id="建立仓库并初始化"><a href="#建立仓库并初始化" class="headerlink" title="建立仓库并初始化"></a>建立仓库并初始化</h4><p>在我们安装完git之后，我们需要初始化我们的仓库了，首先我们需要新建一个文件夹，为了方便操作，所有的命令都在<code>git base</code>里操作进行了，下面将命令都写入下面的代码块中，这样一个简单的库就算建立完成了，虽然什么文件都没有</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">mkdir file    <span class="comment"># 创建文件夹</span></span><br><span class="line"><span class="built_in">cd</span>    file    <span class="comment"># 进入 file 文件夹目录</span></span><br><span class="line">git  init     <span class="comment"># 初始化空仓库，自动建立一个 master 主分支</span></span><br></pre></td></tr></table></figure><h4 id="常用的git命令"><a href="#常用的git命令" class="headerlink" title="常用的git命令"></a>常用的git命令</h4><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line">git <span class="built_in">clone</span> git@github.com:penggewudi/penggewudi.github.io.git <span class="comment"># 克隆仓库</span></span><br><span class="line"></span><br><span class="line">git add [file]      <span class="comment"># 添加文件到暂存区</span></span><br><span class="line">git add .           <span class="comment"># 将所有文件添加到暂存区</span></span><br><span class="line"></span><br><span class="line">git status          <span class="comment"># 查看当前仓库的状态</span></span><br><span class="line"></span><br><span class="line">git <span class="built_in">log</span>             <span class="comment"># 查看仓库的提交日志</span></span><br><span class="line">git <span class="built_in">log</span> -p          <span class="comment"># 查看仓库的提交日志的详细信息</span></span><br><span class="line">git <span class="built_in">log</span> -p -2       <span class="comment"># 查看仓库的提交日志的最近两次的详细信息</span></span><br><span class="line">git <span class="built_in">log</span> --name-only <span class="comment"># 查看哪些文件的名称发生了变化</span></span><br><span class="line"></span><br><span class="line">git commit -m <span class="string">&quot;commit message&quot;</span>  <span class="comment"># 提交文件内容至仓库并且记录提交信息</span></span><br><span class="line">git commit --amend  <span class="comment"># 修改最近的一次提交</span></span><br><span class="line"></span><br><span class="line">git rm  [file]      <span class="comment"># 删除提交过的文件</span></span><br><span class="line">git rm --cached [file]  <span class="comment"># 删除没有提交到仓库的文件</span></span><br><span class="line"></span><br><span class="line">git checkout [branch name]  <span class="comment"># 切换分支</span></span><br><span class="line">git checkout --file <span class="comment"># 恢复到提交前的状态</span></span><br><span class="line">git checkout -b [branch name] <span class="comment"># 新建分支并且进入到新建分支</span></span><br><span class="line"></span><br><span class="line">git branch          <span class="comment"># 查看当前仓库的分支</span></span><br><span class="line">git branch -a       <span class="comment"># 查看远程分支</span></span><br><span class="line">git branch [branch name]    <span class="comment"># 创建分支</span></span><br><span class="line">git branch -d [branch name] <span class="comment">#删除分支</span></span><br><span class="line"></span><br><span class="line">git merge [branch name]  <span class="comment">#合并分支</span></span><br><span class="line">git rebase   master      <span class="comment"># 将分叉的分支重新合并   详情可以参考这篇文章或者下方视频https://www.jianshu.com/p/f7ed3dd0d2d8</span></span><br><span class="line"></span><br><span class="line">git tag [tag name]       <span class="comment">#给当前版本打标签</span></span><br><span class="line"></span><br><span class="line">git archive master --prefix=<span class="string">&#x27;file path&#x27;</span> --forma=zip &gt; file.zip   </span><br><span class="line"><span class="comment">#生成zip代码发布压缩包</span></span><br></pre></td></tr></table></figure><p>下面罗列出来两种常见的git使用方式，一种是从服务器端拉取仓库，另外一种是将本地仓库推送至服务器端</p><h4 id="从远程服务器-github-获得仓库修改提交"><a href="#从远程服务器-github-获得仓库修改提交" class="headerlink" title="从远程服务器(github)获得仓库修改提交"></a>从远程服务器(github)获得仓库修改提交</h4><ul><li><p>首先克隆项目</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git <span class="built_in">clone</span> git@github.com:penggewudi/penggewudi.github.io.git</span><br></pre></td></tr></table></figure></li><li><p>将所有文件添加到暂存区</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git add .</span><br></pre></td></tr></table></figure></li><li><p>创建文件的提交，只是提交至本地仓库</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git commit -m <span class="string">&#x27;modified commit&#x27;</span></span><br></pre></td></tr></table></figure></li><li><p>将代码提交至远端服务器</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git push</span><br></pre></td></tr></table></figure></li></ul><h4 id="将本地项目提交至远端服务器-github"><a href="#将本地项目提交至远端服务器-github" class="headerlink" title="将本地项目提交至远端服务器(github)"></a>将本地项目提交至远端服务器(github)</h4><ul><li><p>首先需要在github端新建一个仓库，得到仓库的ssh链接</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git@github.com:penggewudi/penggewudi.github.io.git</span><br></pre></td></tr></table></figure></li><li><p>创建本地的仓库完成初始化提交</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">git init</span><br><span class="line">git add .</span><br><span class="line">git commit -m <span class="string">&quot;first commit&quot;</span></span><br></pre></td></tr></table></figure></li><li><p>添加远程仓库</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git remote add origin git@github.com:penggewudi/penggewudi.github.io.git</span><br></pre></td></tr></table></figure></li><li><p>查看远程仓库</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git remote -v</span><br></pre></td></tr></table></figure></li><li><p>将本地仓库数据推送到远程仓库主分支</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">git push -u origin master</span><br><span class="line">git push -u origin master  -f  <span class="comment"># 强制推送，覆盖服务器端主分支仓库</span></span><br></pre></td></tr></table></figure></li><li><p>删除远端仓库关联</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git remote rm origin</span><br></pre></td></tr></table></figure></li></ul><h4 id="pull-amp-push"><a href="#pull-amp-push" class="headerlink" title="pull &amp; push"></a>pull &amp; push</h4><ul><li><p>拉取origin主机的ask分支与本地的master分支合并 </p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git pull origin ask:ask</span><br></pre></td></tr></table></figure></li><li><p>拉取origin主机的ask分支与当前分支合并 </p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git pull origin ask</span><br></pre></td></tr></table></figure></li><li><p>如果远程分支与当前本地分支同名直接执行 </p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git pull</span><br></pre></td></tr></table></figure></li><li><p>将当前分支推送到origin主机的对应分支(如果当前分支只有一个追踪分支 ，可省略主机名)</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git push origin</span><br></pre></td></tr></table></figure></li><li><p>使用-u选项指定一个默认主机 ,这样以后就可以不加任何参数直播使用<code>git push</code></p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git push -u origin master</span><br></pre></td></tr></table></figure></li><li><p>删除远程ask分支</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git push origin --delete ask</span><br></pre></td></tr></table></figure></li><li><p>本地ask分支关联远程分支推送</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git push --set-upstream origin ask</span><br></pre></td></tr></table></figure></li></ul><h4 id="其他"><a href="#其他" class="headerlink" title="其他"></a>其他</h4><p>还有一些其他的内容，包括.gitignore文件的添加，定义alias快捷键等等,这部分就先ignore了</p><ul><li>所有空行或者以注释符号 ＃ 开头的行都会被 Git 忽略。</li><li>匹配模式最后跟反斜杠（/）说明要忽略的是目录。</li></ul><blockquote><p>另外我在b站发现了一个比较好的入门视频教程，讲的比较清晰和直观，给出的命令都是平时开发中高频使用的，有需要可以自行观看<a href="https://www.bilibili.com/video/BV154411g7Wm/">click here</a></p></blockquote><hr><p> <strong><em>Attention</em></strong>  : 在写完这篇markdown 上传到github pages的时候呢，出现了一点问题，不论我怎么修改格式，代码块的部分总是乱做一团，我以为是我的语法写的不是很准确，检查了长时间后发现在这篇文章的前后段落我分别加上在前后加上了三个波浪线，在 Hexo进行渲染的时候默认把前后三个波浪线中的content当成了代码块，结果导致了splash出现问题，我也感到很无语，看来后面写的话还是老老实实整点实用的，花里胡哨的东西还是要尽量避免哈哈</p><iframe src="//player.bilibili.com/player.html?aid=56582999&bvid=BV154411g7Wm&cid=98860225&page=35" frameborder="no" scrolling="no" width="95%" height="600"></iframe></p>]]></content>
    
    
      
      
    <summary type="html">&lt;img src=&quot;https://i.loli.net/2020/06/14/puywSXPxgH5hOcQ.png&quot; alt=&quot;git&quot; style=&quot;zoom: 25%;&quot; /&gt;

&lt;h4 id=&quot;Git的使用说明介绍&quot;&gt;&lt;a href=&quot;#Git的使用说明介绍&quot; clas</summary>
      
    
    
    
    
    <category term="Git" scheme="https://penggewudi.github.io/tags/Git/"/>
    
  </entry>
  
  <entry>
    <title>ReStart</title>
    <link href="https://penggewudi.github.io/2020/06/13/ReStart/"/>
    <id>https://penggewudi.github.io/2020/06/13/ReStart/</id>
    <published>2020-06-13T14:01:56.000Z</published>
    <updated>2020-11-08T01:41:54.467Z</updated>
    
    <content type="html"><![CDATA[<p>时间过得飞快，距离上一次写这个blog以及有几乎两年之久了，依稀还记得当时熬夜配置HEXO框架的情形，迫不及待的上传了第一篇的blog到github pages的场景，似乎那时候又用不完的精力去折腾去玩，后来应为考研的缘故也手上所有的东西就先放下来了，没有时间去玩了，陪伴的就只是试卷和题目了，时至今日也算是如愿以偿的成为了一名渣渣研究生，我想也是时候慢慢的把自己的blog捡起来了，我觉得可以在这里分享一下我的学习过程和采坑过程，要不然的话同时有一种啥也没有学到手的感觉，内心空荡荡<del>~</del></p><ul><li>记录学习的内容，分享学习的一些心得</li><li>记录自己的踩坑的问题和经验，方便日后查看和回顾</li><li>写点有的没的，哈哈哈</li></ul> <iframe frameborder="no" border="0" marginwidth="0" marginheight="0" width=330 height=86 src="//music.163.com/outchain/player?type=2&id=1418766731&auto=0&height=66"></iframe>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;时间过得飞快，距离上一次写这个blog以及有几乎两年之久了，依稀还记得当时熬夜配置HEXO框架的情形，迫不及待的上传了第一篇的blog到github pages的场景，似乎那时候又用不完的精力去折腾去玩，后来应为考研的缘故也手上所有的东西就先放下来了，没有时间去玩了，陪伴的</summary>
      
    
    
    
    
    <category term="学习" scheme="https://penggewudi.github.io/tags/%E5%AD%A6%E4%B9%A0/"/>
    
  </entry>
  
  <entry>
    <title>随笔</title>
    <link href="https://penggewudi.github.io/2018/06/22/%E9%9A%8F%E7%AC%94/"/>
    <id>https://penggewudi.github.io/2018/06/22/%E9%9A%8F%E7%AC%94/</id>
    <published>2018-06-22T13:31:59.000Z</published>
    <updated>2020-11-08T01:46:42.416Z</updated>
    
    <content type="html"><![CDATA[<p>我发现冰岛真的是一个神奇的国家，只有几十万人口的小国竟然踢进了世界杯而且踢平了阿根廷，真的是难以置信，但是后来我发现维京后裔是真的强，而且看到下面这张图真的感觉……</p><p>冰岛是我世界杯快乐之源泉，哈哈哈<del>~</del></p><iframe frameborder="no" border="0" marginwidth="0" marginheight="0" width=330 height=86 src="//music.163.com/outchain/player?type=2&id=27560007&auto=0&height=66"></iframe>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;我发现冰岛真的是一个神奇的国家，只有几十万人口的小国竟然踢进了世界杯而且踢平了阿根廷，真的是难以置信，但是后来我发现维京后裔是真的强，而且看到下面这张图真的感觉……&lt;/p&gt;
&lt;p&gt;冰岛是我世界杯快乐之源泉，哈哈哈&lt;del&gt;~&lt;/del&gt;&lt;/p&gt;
&lt;iframe frameb</summary>
      
    
    
    
    
    <category term="随笔" scheme="https://penggewudi.github.io/tags/%E9%9A%8F%E7%AC%94/"/>
    
  </entry>
  
  <entry>
    <title>Computer Operation System</title>
    <link href="https://penggewudi.github.io/2018/06/10/Computer-Operation-System/"/>
    <id>https://penggewudi.github.io/2018/06/10/Computer-Operation-System/</id>
    <published>2018-06-10T12:48:49.000Z</published>
    <updated>2020-11-08T01:48:07.063Z</updated>
    
    <content type="html"><![CDATA[<h2 id="操作系统打卡"><a href="#操作系统打卡" class="headerlink" title="操作系统打卡~"></a>操作系统打卡<del>~</del></h2><h3 id="老师的声音很好听，讲的也非常仔细，比喻之王，哈哈哈"><a href="#老师的声音很好听，讲的也非常仔细，比喻之王，哈哈哈" class="headerlink" title="老师的声音很好听，讲的也非常仔细，比喻之王，哈哈哈~"></a>老师的声音很好听，讲的也非常仔细，比喻之王，哈哈哈~</h3><blockquote><p><a href="https://www.bilibili.com/video/av12787154/?p=1">click here for more</a></p></blockquote>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;操作系统打卡&quot;&gt;&lt;a href=&quot;#操作系统打卡&quot; class=&quot;headerlink&quot; title=&quot;操作系统打卡~&quot;&gt;&lt;/a&gt;操作系统打卡&lt;del&gt;~&lt;/del&gt;&lt;/h2&gt;&lt;h3 id=&quot;老师的声音很好听，讲的也非常仔细，比喻之王，哈哈哈&quot;&gt;&lt;a href=&quot;</summary>
      
    
    
    
    
    <category term="学习" scheme="https://penggewudi.github.io/tags/%E5%AD%A6%E4%B9%A0/"/>
    
    <category term="考研" scheme="https://penggewudi.github.io/tags/%E8%80%83%E7%A0%94/"/>
    
  </entry>
  
  <entry>
    <title>Lanch Github Pages &amp; Hexo</title>
    <link href="https://penggewudi.github.io/2018/06/06/Lanch-Github-Pages-Hexo/"/>
    <id>https://penggewudi.github.io/2018/06/06/Lanch-Github-Pages-Hexo/</id>
    <published>2018-06-06T01:34:23.000Z</published>
    <updated>2020-11-08T01:49:20.547Z</updated>
    
    <content type="html"><![CDATA[<p>今天无意间打开了一篇博客，讲到了github page建站的东西，很是感兴趣，因为之前也搞过一段时间的Wordpress，不知道为啥，搞这种很有个性的骚动西总是能吊足我的胃口，我觉得不吃不喝都可以。回想起我之前的建站经历</p><blockquote><p> <del>那是相当的顺利</del> 一句</p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$  Rm-rf</span><br></pre></td></tr></table></figure><p>贯穿了我整个建站之路。</p><p><img src="https://i.loli.net/2018/06/22/5b2cf225c2abe.jpg" alt="MarkLite"></p><h3 id="先忏悔一下🌚"><a href="#先忏悔一下🌚" class="headerlink" title="先忏悔一下🌚"></a>先忏悔一下🌚</h3><ol><li><p>现在想想当时踩了那么多的坑，花了那么多的时间，去配置环境，现在一行code所有的努力好像都付之东流了😭就感觉少活了一段时间似的，血亏。</p></li><li><p>本来是考研看书时间，我又手贱的点开了知乎、csdn、github、简书…..然后我就知道今天一天就会被邪恶的电脑所吞噬了，看来下次不能带电脑了😂🌚😭忏悔一下忏悔一下。</p></li></ol><h3 id="分享一下我的感受吧。"><a href="#分享一下我的感受吧。" class="headerlink" title="分享一下我的感受吧。"></a>分享一下我的感受吧。</h3><p><img src="https://i.loli.net/2018/06/22/5b2cf260cfd6c.jpg" alt="MarkLite"></p><ol><li><p>首先从建站的难度上来说，因为我之前熟悉过git已经github的使用，相对来说，并没有那么困难，只需要再依赖一下node.js就可以了，环境配置基本很顺利。</p></li><li><p>hexo确实是一个很好的静态网站平台，而且访问可以依托于github，说到底，还是我大github威武，开源大法好！（好像github要被微软爸爸收购了，希望他们强强联手共同建造一个好的开源生态，撒花）github page 可以请让我们发布一个网站，你只需要把你想要发布的数据上传到仓库就可以了，就和上传你的code一样，很方便，而且最重要的是免费的！！！所以只要github还在，那么我们就可以一直挂载我们的博客，想想能省钱买很多肥宅快乐水就很开心🤣。</p></li><li><p>是不是就一点问题也没有呢，那肯定不是的啦，由于是静态的网页，所以虽然环境的搭建没有较多繁琐的过程，其本身的配置需要花一点时间去学习，没有GUI，只能对照着文档来进行修改config文件，你可以选择很多的主题，然后再去修改相应主题的config文件，balabalbala的一大推，期间我也遇到过一些解决不了的bug或误操作删掉了一些参数，只需要重新clone 主题的git，然后重新操作，不怕翻车。因为我不是学cs出生的，本身对于前端的知识也不是很懂，很多东西只是了解其功能以及使用，并没有过多的深入去了解，所以还需要后续的补充。见谅。</p></li><li><p>虽然github在国内是可以访问的，但是还是慢啊😪加载慢，上传也慢，今天上传的时候40k/s，不知道是什么原因，而且上传之后github并没有更新，problem+1，等待后续的测试啦。</p></li></ol><h3 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h3><ul><li>In a word ，建站告一段落，零零碎碎的还有一些问题，markdown的基本的语法还需要巩固一下，一些常用的插件还需要补足之类的，，然后有时间的话就写写心得技术贴shade，没时间就算了🤣时间不早啦，溜…</li></ul><iframe frameborder="no" border="0" marginwidth="0" marginheight="0" width=330 height=86 src="//music.163.com/outchain/player?type=2&id=41653419&auto=0&height=66"></iframe>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;今天无意间打开了一篇博客，讲到了github page建站的东西，很是感兴趣，因为之前也搞过一段时间的Wordpress，不知道为啥，搞这种很有个性的骚动西总是能吊足我的胃口，我觉得不吃不喝都可以。回想起我之前的建站经历&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt; &lt;del&gt;</summary>
      
    
    
    
    
    <category term="建站" scheme="https://penggewudi.github.io/tags/%E5%BB%BA%E7%AB%99/"/>
    
  </entry>
  
</feed>
